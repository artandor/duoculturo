datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Answer {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  title      String    @db.VarChar(255)
  isCorrect  Boolean   @default(false)
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
}

model Question {
  id       Int      @id @default(autoincrement())
  title    String   @db.MediumText
  multiple Boolean  @default(false)
  answers  Answer[]
  theme    Theme    @relation(fields: [themeId], references: [id])
  quizz    Quizz?   @relation(fields: [quizzId], references: [id])
  quizzId  Int?
  themeId  Int
}

model Theme {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(255)
  questions Question[]
  slug      String     @unique
}

model Quizz {
  id        Int         @id @default(autoincrement())
  questions Question[]
  QuizzUser QuizzUser[]
}

model QuizzUser {
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizz             Quizz     @relation(fields: [quizzId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  score             Int       @default(-1)
  lastEndedQuestion Int?
  userId            String
  quizzId           Int

  @@id([userId, quizzId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  QuizzUser     QuizzUser[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
